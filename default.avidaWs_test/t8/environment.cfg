# _solid-finite-NO-diffusion_whole
# this dish is 40x40
# inflow all of subdish; out flow everywhere in subdish
# the smaller the outflow, the longer to reach equilibrium
# input it total input; to get input/cell = input / # input cells
# equilibrium = (input/cell) / output

#!not0:supply=finite:gradient=false
RESOURCE not0:geometry=global:xdiffuse=0:ydiffuse=0:initial=80000
REACTION not0  not  process:resource=not0:value=1.0:type=pow:depletable=0 requisite:max_count=1

#!nan0:supply=finite:gradient=false
RESOURCE nan0:geometry=global:xdiffuse=0:ydiffuse=0:initial=80000
REACTION nan0 nand process:resource=nan0:value=1.0:type=pow:depletable=0 requisite:max_count=1

#!and0:supply=finite:gradient=false
RESOURCE and0:geometry=global:xdiffuse=0:ydiffuse=0:initial=64000
REACTION and0 and  process:resource=and0:value=2.0:type=pow:depletable=0 requisite:max_count=1

#!orn0:supply=finite:gradient=false
RESOURCE orn0:geometry=global:xdiffuse=0:ydiffuse=0:initial=64000
REACTION orn0 orn  process:resource=orn0:value=2.0:type=pow:depletable=0 requisite:max_count=1

#!oro1:supply=finite:gradient=false
RESOURCE oro1:geometry=global:xdiffuse=0:ydiffuse=0:initial=48000
REACTION oro0  or process:resource=oro1:value=1.0:type=pow:depletable=0 requisite:max_count=1

#!ant0:supply=finite:gradient=false
RESOURCE ant0:geometry=global:xdiffuse=0:ydiffuse=0:initial=48000
REACTION ant0 andn process:resource=ant0:value=1.0:type=pow:depletable=0 requisite:max_count=1

#!nor0:supply=finite:gradient=false
RESOURCE nor0:geometry=global:xdiffuse=0:ydiffuse=0:initial=32000
REACTION nor0 nor  process:resource=nor0:value=2.0:type=pow:depletable=0 requisite:max_count=1

#!xor0:supply=finite:gradient=false
RESOURCE xor0:geometry=global:xdiffuse=0:ydiffuse=0:initial=32000
REACTION xor0 xor  process:resource=xor0:value=2.0:type=pow:depletable=0 requisite:max_count=1

#!e1:supply=finite:gradient=false
RESOURCE equ0:geometry=global:xdiffuse=0:ydiffuse=0:initial=16000
REACTION equ0  equ  process:resource=equ0:value=1.0:type=pow:depletable=0 requisite:max_count=1

# Old way to specify infinite resources. I think these can still be used as long as 
# there are no spatial resources for that function
# format on the next line
#REACTION  reaction_name  task[:argument:...]  [process:...]  [requisite:...]
# the task is in lower case. For Avida-ED we use a value of 0.0 for no reward 
# and a set value is rewarded based on task difficulty. Those are at the end.

#REACTION NOT  not  process:value=0.0:type=pow requisite:max_count=1  #value=1.0
#REACTION NAND nand process:value=0.0:type=pow requisite:max_count=1  #value=1.0  
#REACTION AND  and  process:value=0.0:type=pow requisite:max_count=1  #value=2.0
#REACTION ORN  orn  process:value=0.0:type=pow requisite:max_count=1  #value=2.0
#REACTION OR   or   process:value=0.0:type=pow requisite:max_count=1  #value=3.0
#REACTION ANDN andn process:value=0.0:type=pow requisite:max_count=1  #value=3.0
#REACTION NOR  nor  process:value=0.0:type=pow requisite:max_count=1  #value=4.0
#REACTION XOR  xor  process:value=0.0:type=pow requisite:max_count=1  #value=4.0
#REACTION EQU  equ  process:value=0.0:type=pow requisite:max_count=1  #value=5.0

