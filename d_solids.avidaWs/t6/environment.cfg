# _solid-finite-NO-diffusion_whole
# this dish is 40x40
# inflow all of subdish; out flow everywhere in subdish
# the smaller the outflow, the longer to reach equilibrium
# input it total input; to get input/cell = input / # input cells
# equilibrium = (input/cell) / output

RESOURCE not1:geometry=grid:xdiffuse=0:ydiffuse=0:initial=16000:\
inflowX1=0:inflowY1=0:inflowX2=39:inflowY2=39:\
outflowX1=0:outflowY1=0:outflowX2=39:outflowY2=39

REACTION NOT1  not  process:resource=not1:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1

RESOURCE nan1:geometry=grid:xdiffuse=0:ydiffuse=0:initial=16000:\
inflowX1=0:inflowY1=0:inflowX2=39:inflowY2=39:\
outflowX1=0:outflowY1=0:outflowX2=39:outflowY2=39

REACTION NAND1 nand process:resource=nan1:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1

RESOURCE and1:geometry=grid:xdiffuse=0:ydiffuse=0:initial=8000:\
inflowX1=0:inflowY1=0:inflowX2=39:inflowY2=39:\
outflowX1=0:outflowY1=0:outflowX2=39:outflowY2=39

REACTION  AND1 and  process:resource=and1:value=2.0:type=pow:min=0.9:max=1 requisite:max_count=1

RESOURCE orn1:geometry=grid:xdiffuse=0:ydiffuse=0:initial=8000:\
inflowX1=0:inflowY1=0:inflowX2=39:inflowY2=39:\
outflowX1=0:outflowY1=0:outflowX2=39:outflowY2=39

REACTION  ORN1 orn  process:resource=orn1:value=2.0:type=pow:min=0.9:max=1 requisite:max_count=1

RESOURCE oro1:geometry=grid:xdiffuse=0:ydiffuse=0:initial=4000:\
inflowX1=0:inflowY1=0:inflowX2=39:inflowY2=39:\
outflowX1=0:outflowY1=0:outflowX2=39:outflowY2=39

REACTION  OR1  or process:resource=oro1:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1

RESOURCE ant1:geometry=grid:xdiffuse=0:ydiffuse=0:initial=4000:\
inflowX1=0:inflowY1=0:inflowX2=39:inflowY2=39:\
outflowX1=0:outflowY1=0:outflowX2=39:outflowY2=39

REACTION ANDN1 andn process:resource=ant1:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1

RESOURCE nor1:geometry=grid:xdiffuse=0:ydiffuse=0:initial=2000:\
inflowX1=0:inflowY1=0:inflowX2=39:inflowY2=39:\
outflowX1=0:outflowY1=0:outflowX2=39:outflowY2=39

REACTION  NOR1 nor  process:resource=nor1:value=2.0:type=pow:min=0.9:max=1 requisite:max_count=1

RESOURCE xor1:geometry=grid:xdiffuse=0:ydiffuse=0:initial=2000:\
inflowX1=0:inflowY1=0:inflowX2=39:inflowY2=39:\
outflowX1=0:outflowY1=0:outflowX2=39:outflowY2=39

REACTION  XOR1 xor  process:resource=xor1:value=2.0:type=pow:min=0.9:max=1 requisite:max_count=1

RESOURCE equ1:geometry=grid:xdiffuse=0:ydiffuse=0:initial=1000:\
inflowX1=0:inflowY1=0:inflowX2=39:inflowY2=39:\
outflowX1=0:outflowY1=0:outflowX2=39:outflowY2=39

REACTION EQU1  equ  process:resource=equ1:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1

# Old way to specify infinite resources. I think these can still be used as long as 
# there are no spatial resources for that function
# format on the next line
#REACTION  reaction_name  task[:argument:...]  [process:...]  [requisite:...]
# the task is in lower case. For Avida-ED we use a value of 0.0 for no reward 
# and a set value is rewarded based on task difficulty. Those are at the end.

#REACTION NOT  not  process:value=0.0:type=pow requisite:max_count=1  #value=1.0
#REACTION NAND fd process:value=0.0:type=pow requisite:max_count=1  #value=1.0  
#REACTION AND  and  process:value=0.0:type=pow requisite:max_count=1  #value=2.0
#REACTION ORN  orn  process:value=0.0:type=pow requisite:max_count=1  #value=2.0
#REACTION OR   or   process:value=0.0:type=pow requisite:max_count=1  #value=3.0
#REACTION ANDN andn process:value=0.0:type=pow requisite:max_count=1  #value=3.0
#REACTION NOR  nor  process:value=0.0:type=pow requisite:max_count=1  #value=4.0
#REACTION XOR  xor  process:value=0.0:type=pow requisite:max_count=1  #value=4.0
#REACTION EQU  equ  process:value=0.0:type=pow requisite:max_count=1  #value=5.0

