# Help and Instructions for using environment.cfg files and the Test Setup Page. 
#
# The buttons on the test setup page work, but I do NOT recommend changing the 
# test dish size on a given example as all the input(x & y), output(x & y) and cellbox
# values would need to change. 
#
# ========================================================================================
# Formating
#
# The "#" sign is a comment for that line and avida will ignore the rest of the line.
# The pattern of white space and colons must be followed 
#   or avida cannot read the file. 
#
# the "\" is a line continuation character. 
# Do not add a hard return in a data line without the \ character at the end, 
# Do not add spaces unless there is already white space there. 
#
# extra blank lines are fine. 
#
# ========================================================================================
# About RESOURCES 
#
# more details are about Avida Environment files is at 
#    https://github.com/devosoft/avida/wiki/Environment-file
#
# There must be at least one REACTION for each of the 9 tasks that Avida-ED uses,
#    even if there is no reward.
# A logic-9 function can have more than one resource/reaction. 
#
# Feel free to edit the values for 
#   inflow:  this is the total amount of the resource, 
#            so the inflow per cell = inflow area of the inflow 
#            as defined by inflowx1, inflowx2, inflowy1, inflowy2
#   outflow: this the fraction (0.0 and 1.0) of the resource that flows out of each cell
#            in the area as defined by outflowx1, outflowx2, outflowy1, outflowy2
#            
#   xgravity or ygravity: range -1.0 to 1.0; how fast the resource flows in that direction. 
#                         The movement is only dependent on the amount in the given cell.
#                         There is only flow in one direction, up, down, left or right or
#                         a diagonal from the combination of x and y gravity.
#   xdiffuse or ydiffuse: range 0.0 to 1.0; how fast the resource diffuses where the flow
#                         depends on the amount in adjacent cells. 
#   for both gravity or diffusion when limited to horizontal flow, in avida, there is still
#      some flow to the diagonal cells. For instance, if the flow is down, most some flows
#      into the cells in each diagonal direction as they are still below the source cell. 
#
# Default values
#   inflow = outflow = 0.0
#   xgravity = ygravity = 0.0
#   xdiffuse = ydiffuse = 1
# 
# Most formating errors will cause avida to stop. The program will probably need to be reloaded. 
#
# In each example file, I tried to only vary two parameters
#
# If you change inflowX1, inFlowX2, inflowY1, inflowY2, outflowX1, outflowX2, outflowY1,
# outflowY2 or the cellbox values be sure the coordinates stay in the dish size.
#
# cellbox=0,20,20,20 where the first two numbers are the coordinates of the upper left
#         corner of the box. The last two numbers are the box size. Row and column numbers
#         in Avida start with 0. Cell box contains the resource in that boxed area. The 
#         cell box and the inputx and y, & outputx and y values much match. Without cellbox
#         the resources could cross subdish areas if diffusion and or gravity is active. 
#
# ========================================================================================
# Basic Examples of Differnce statements. 
#----------------------------------------------------------------------------------
# Old way to specify infinite resources, or resourcds that are not rewarded. 
# I'm using any time tasks are not rewarded as they still need to be defined.
#
# format on the next line
#REACTION  reaction_name  task[:argument:...]  [process:...]  [requisite:...]
# the task is in lower case. For Avida-ED we use a value of 0.0 for no reward 
# and a set value is rewarded based on task difficulty. Those values are at the end.
# the types is pow for power and means that the "reward" is multiplied by 2 raised to 
# power of the value and that leads to the x2, x4, x8, x16 and x32.
# max_count=1 means Avida-ED only rewards an organism for performing a logic function once. 
# these REACTIONs do not require a resournce.
#
#REACTION  NOT  not process:value=0.0:type=pow requisite:max_count=1  #value=1.0
#REACTION NAND nand process:value=0.0:type=pow requisite:max_count=1  #value=1.0  
#REACTION  AND  and process:value=0.0:type=pow requisite:max_count=1  #value=2.0
#REACTION  ORN  orn process:value=0.0:type=pow requisite:max_count=1  #value=2.0
#REACTION   OR   or process:value=0.0:type=pow requisite:max_count=1  #value=3.0
#REACTION ANDN andn process:value=0.0:type=pow requisite:max_count=1  #value=3.0
#REACTION  NOR  nor process:value=0.0:type=pow requisite:max_count=1  #value=4.0
#REACTION  XOR  xor process:value=0.0:type=pow requisite:max_count=1  #value=4.0
#REACTION  EQU  equ process:value=0.0:type=pow requisite:max_count=1  #value=5.0
#
#
#----------------------------------------------------------------------------------
# Example infinite resources in 40x40 dish the way I have to parse anyway.

RESOURCE not1:geometry=grid:initial=1600
REACTION  NOT  not process:resource=not1:value=1.0:type=pow:depletable=0 requisite:max_count=1

# this REACTION specifies a resource and making depletable=0 means it does not consume the
# resource and so acts like the resource is infinite. 
# 
# ----------------------------------------------------------------------------------------
# Example infinite resources in 40x40 dish using CELL which otherwise I need not parse
# The number after the .. is the number of cells in the dish - 1, as we start counting at 0. 
# The avida world can also be represented as an ond dimensional array from 0 to worldsize-1.
#
CELL nan1:0..1599:initial=1
REACTION  NAND nand process:resource=nan1:value=1.0:type=pow:depletable=0 requisite:max_count=1    
#
#----------------------------------------------------------------------------------
# Examples with limited spatial resources and reactions with the whole dish. 
#----------------------------------------------------------------------------------
#
# from x_diffuse_opposite_outflow
# input on left most column; outflow in the right most column; xdiffuse
# gradient should start looking good at about 500 updates, better at 1000 updates. 
# saturated to left, gradient to right still looks good at 2000 updates 

RESOURCE and1:geometry=grid:ydiffuse=0.0:outflow=1:inflow=40:xdiffuse=1:\
inflowX1=15:inflowY1=0:inflowX2=15:inflowY2=39:\
outflowX1=39:outflowY1=0:outflowX2=39:outflowY2=39

REACTION  AND  and process:resource=and1:value=1.0:type=pow:max=1:min=0.5  requisite:max_count=1

# min is the minimum amount of the resource, and1, that can be consumed. If the cell contains
# less than 0.5 units, nothing is consumed. max is the maximum amount that is consumed. I 
# think that with our "infinite" resources they are rewarded as if they consumed 1 unit of
# resource. You might wish to experiment with different values for min. I have generally
# used 1 or 1.1 for max. 

# from x_diffuse_all-2-right_outflow
# input on left; outflow in all cells to the right of inflow column
# gradient should start looking good at about 500 updates, better at 1000 updates. 
# gradient showing saturation at 2000 updates

RESOURCE orn1:geometry=grid:ydiffuse=0.0:outflow=0.0004:inflow=20:xdiffuse=1:\
inflowX1=15:inflowY1=0:inflowX2=15:inflowY2=39:\
outflowX1=16:outflowY1=0:outflowX2=39:outflowY2=39

REACTION  ORN  orn process:resource=orn1:value=2.0:type=pow:max=1:min=0.5  requisite:max_count=1

#----------------------------------------------------------------------------------
# Examples with limited spatial resources and reactions in quarters of the dish
#----------------------------------------------------------------------------------
#
# with diffusion from 4ths_solid-diffusion
# inflow all of subdish; out flow everywhere
# the smaller the outflow, the longer to reach equilibrium
# input it total input; to get input/cell = input / # input cells
# equilibrium = (input/cell) / output

#upper left
RESOURCE oro1:geometry=grid:xdiffuse=1:ydiffuse=1:inflow=20:outflow=0.0025:\
inflowX1=0:inflowY1=0:inflowX2=19:inflowY2=19:cellbox=0,0,20,20:\
outflowX1=0:outflowY1=0:outflowX2=19:outflowY2=19

#upper right
RESOURCE oro2:geometry=grid:xdiffuse=1:ydiffuse=1:inflow=40:outflow=0.005:\
inflowX1=20:inflowY1=0:inflowX2=39:inflowY2=19:cellbox=20,0,20,20:\
outflowX1=20:outflowY1=0:outflowX2=39:outflowY2=19

#lower left
RESOURCE oro3:geometry=grid:xdiffuse=1:ydiffuse=1:inflow=80:outflow=0.01:\
inflowX1=0:inflowY1=20:inflowX2=19:inflowY2=39:cellbox=0,20,20,20:\
outflowX1=0:outflowY1=20:outflowX2=19:outflowY2=39

#lower right
RESOURCE oro4:geometry=grid:xdiffuse=1:ydiffuse=1:inflow=160:outflow=0.02:\
inflowX1=20:inflowY1=20:inflowX2=39:inflowY2=39:cellbox=20,20,20,20:\
outflowX1=20:outflowY1=20:outflowX2=39:outflowY2=39

REACTION  OR1 or  process:resource=oro1:value=3.0:type=pow:min=0.9:max=1 requisite:max_count=1
REACTION  OR2 or  process:resource=oro2:value=3.0:type=pow:min=0.9:max=1 requisite:max_count=1
REACTION  OR3 or  process:resource=oro3:value=3.0:type=pow:min=0.9:max=1 requisite:max_count=1
REACTION  OR4 or  process:resource=oro4:value=3.0:type=pow:min=0.9:max=1 requisite:max_count=1

#----------------------------------------------------------------------------------
# from 4ths_solid-NO-diffusion
# inflow all of subdish; out flow everywhere; NO diffusion
# the smaller the outflow, the longer to reach equilibrium
# input it total input; to get input/cell = input / # input cells
# equilibrium = (input/cell) / output

RESOURCE ant1:geometry=grid:xdiffuse=0:ydiffuse=0:inflow=240:outflow=0.05:\
inflowX1=0:inflowY1=0:inflowX2=19:inflowY2=19:cellbox=0,0,20,20:\
outflowX1=0:outflowY1=0:outflowX2=19:outflowY2=19

RESOURCE ant2:geometry=grid:xdiffuse=0:ydiffuse=0:inflow=480:outflow=0.1:\
inflowX1=20:inflowY1=0:inflowX2=39:inflowY2=19:cellbox=20,0,20,20:\
outflowX1=20:outflowY1=0:outflowX2=39:outflowY2=19

RESOURCE ant3:geometry=grid:xdiffuse=0:ydiffuse=0:inflow=960:outflow=0.2:\
inflowX1=0:inflowY1=20:inflowX2=19:inflowY2=39:cellbox=0,20,20,20:\
outflowX1=0:outflowY1=20:outflowX2=19:outflowY2=39

RESOURCE ant4:geometry=grid:xdiffuse=0:ydiffuse=0:inflow=1920:outflow=0.4:\
inflowX1=20:inflowY1=20:inflowX2=39:inflowY2=39:cellbox=20,20,20,20:\
outflowX1=20:outflowY1=20:outflowX2=39:outflowY2=39

REACTION ANDN1 andn process:resource=ant1:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1
REACTION ANDN2 andn process:resource=ant2:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1
REACTION ANDN3 andn process:resource=ant3:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1
REACTION ANDN4 andn process:resource=ant4:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1

#----------------------------------------------------------------------------------
# Examples with limited spatial resources and reactions in quarters of the dish
#----------------------------------------------------------------------------------
# Horizontal diffusion from 4ths_40x40_diffuse-opposite-outflow
# inflow at left or right side; out flow at opposite edge.
# not sure diffusion ever stabilizes to an equilibrium. 
# goal is a gradient that reaches equilibrium

#upper half
RESOURCE nor1:geometry=grid:xdiffuse=0:outflow=1:inflow=10:xdiffuse=0.99:\
inflowX1=19:inflowY1=0:inflowX2=19:inflowY2=19:cellbox=0,0,40,20:\
outflowX1=39:outflowY1=0:outflowX2=39:outflowY2=19
# ==> corner_hi= ; mid_rowx=  at 1000 updates
 
#lower half
RESOURCE nor2:geometry=grid:xdiffuse=0:outflow=1:inflow=10:xdiffuse=1:\
inflowX1=19:inflowY1=20:inflowX2=19:inflowY2=39:cellbox=0,20,40,20:\
outflowX1=39:outflowY1=20:outflowX2=39:outflowY2=39
# ==> corner_hi= ; mid_rowx=  at 1000 updates

REACTION  NOR1  nor process:resource=nor1:value=2.0:type=pow:min=0.9:max=1.1 requisite:max_count=1
REACTION  NOR2  nor process:resource=nor2:value=2.0:type=pow:min=0.9:max=1.1 requisite:max_count=1

#----------------------------------------------------------------------------------
# this dish is 40x40;    Horizontal diffusion
# inflow at left or right side; out flow for entire subdish except inflow row.
# the goal is a gradient that reaches equilibrium. This does not yet exist. 

#upper half
RESOURCE xor1:geometry=grid:xdiffuse=0:outflow=0.01:inflow=10:xdiffuse=1:\
inflowX1=19:inflowY1=0:inflowX2=19:inflowY2=19:cellbox=0,0,40,20:\
outflowX1=20:outflowY1=0:outflowX2=39:outflowY2=19
# ==> corner_hi= ; mid_rowx=  at 1000 updates
 
#lower half
RESOURCE xor2:geometry=grid:xdiffuse=0:outflow=0.005:inflow=10:xdiffuse=1:\
inflowX1=19:inflowY1=20:inflowX2=19:inflowY2=39:cellbox=0,20,40,20:\
outflowX1=20:outflowY1=20:outflowX2=39:outflowY2=39
# ==> corner_hi= ; mid_rowx=  at 1000 updates

REACTION  xor1  xor process:resource=xor1:value=4.0:type=pow:min=0.9:max=1.1 requisite:max_count=1
REACTION  xor2  xor process:resource=xor2:value=4.0:type=pow:min=0.9:max=1.1 requisite:max_count=1


#----------------------------------------------------------------------------------
# from 4ths_40x40_gravity_all-outflow
# this dish is 40x40 y-gravity only with no diffusion. 
# the goal is a gradient that reaches equilibrium. This has not been done yet in Avida-ED
# inflow at top; out flow everywhere except inflow row

RESOURCE equ1:geometry=grid:xdiffuse=0:ydiffuse=0:ygravity=-1:inflow=200:outflow=0.350:\
inflowX1=0:inflowY1=19:inflowX2=19:inflowY2=19:cellbox=0,0,20,20:\
outflowX1=0:outflowY1=0:outflowX2=19:outflowY2=18
#inflow=80:outflow=0.1  seems to flow to the top and build up there
#inflow=110:outflow=0.1:      not enough outflow at 43 updates

RESOURCE equ2:geometry=grid:xdiffuse=0:ydiffuse=0:ygravity=-1:inflow=200:outflow=0.355:\
inflowX1=20:inflowY1=19:inflowX2=39:inflowY2=19:cellbox=20,0,20,20:\
outflowX1=20:outflowY1=0:outflowX2=39:outflowY2=18
#inflow=120:outflow=0.15:  seems to flow to the top and build up there
#inflow=160:outflow=0.225:\    not enough outflow at 43 updates

RESOURCE equ3:geometry=grid:xdiffuse=0:ydiffuse=0:ygravity=1:inflow=200:outflow=0.36:\
inflowX1=0:inflowY1=21:inflowX2=19:inflowY2=21:cellbox=0,20,20,20:\
outflowX1=0:outflowY1=22:outflowX2=19:outflowY2=39

RESOURCE equ4:geometry=grid:xdiffuse=0:ydiffuse=0:ygravity=1:inflow=200:outflow=0.365:\
inflowX1=20:inflowY1=21:inflowX2=39:inflowY2=21:cellbox=20,20,20,20:\
outflowX1=20:outflowY1=22:outflowX2=39:outflowY2=39

REACTION  EQU1  equ process:resource=equ1:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1
REACTION  EQU2  equ process:resource=equ2:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1
REACTION  EQU3  equ process:resource=equ3:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1
REACTION  EQU4  equ process:resource=equ4:value=1.0:type=pow:min=0.9:max=1 requisite:max_count=1


# Diffusion must be set to zero in both directions to get only gravity because they default to 1
#
#----------------------------------------------------------------------------------
#

# The displayed resources are the sum of all the resources in the dish. A cell could contain 
# more than one and# resource. None do in these examples because I used cellbox.
#
# ========================================================================================

